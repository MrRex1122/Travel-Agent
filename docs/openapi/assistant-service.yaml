openapi: 3.0.3
info:
  title: Assistant Service API
  version: 1.0.0
  description: |
    Assistant Service provides conversational orchestration and can call other services.
    This version exposes a simple chat endpoint backed by a local Ollama model.
servers:
  - url: http://localhost:8090
paths:
  /api/assistant/ask:
    post:
      summary: Ask assistant
      operationId: askAssistant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AskRequest'
            examples:
              example1:
                value:
                  prompt: "Say hello in one short sentence."
      responses:
        '200':
          description: Assistant response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AskResponse'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /api/assistant/agent/ask:
    post:
      summary: Ask assistant (agent mode with tools)
      operationId: askAssistantAgent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AskRequest'
            examples:
              example1:
                value:
                  prompt: "Create a booking for user u-123 on trip t-456 with price 99.9"
      responses:
        '200':
          description: Assistant agent response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AskResponse'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /actuator/health:
    get:
      summary: Health check
      operationId: health
      responses:
        '200':
          description: OK
  /api/assistant/query:
    post:
      summary: Query assistant (dialog with optional history)
      operationId: queryAssistant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
            examples:
              example1:
                value:
                  prompt: "Show me my booking history."
                  mode: "agent"
                  history:
                    - role: "user"
                      content: "Hi"
                    - role: "assistant"
                      content: "Hello! How can I help you?"
      responses:
        '200':
          description: Assistant response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
components:
  schemas:
    AskRequest:
      type: object
      required: [prompt]
      properties:
        prompt:
          type: string
          description: User prompt to send to the model.
    AskResponse:
      type: object
      properties:
        answer:
          type: string
          description: Assistant textual answer.
    Message:
      type: object
      required: [role, content]
      properties:
        role:
          type: string
          enum: [user, assistant]
        content:
          type: string
    QueryRequest:
      type: object
      required: [prompt]
      properties:
        prompt:
          type: string
          description: User prompt to send to the model.
        mode:
          type: string
          description: Mode selection, 'agent' (default) uses tools; 'llm' uses raw model.
          enum: [agent, llm]
        history:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    QueryResponse:
      type: object
      properties:
        answer:
          type: string
          description: Assistant textual answer.
